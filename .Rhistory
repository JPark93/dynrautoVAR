evB1 <- eigen(matrix(mat, nvar, nvar, byrow = T))$values
if(any(sqrt(abs(Re(evB1))^2 + abs(Im(evB1))^2) > 1)){
index = index+1; message('Non-Stationary. Retrying.')
}else{
return(t(mat)); index = attempts}
}
}
set.seed(321993)
N = 52
nvar = 10
paths = 12
cfs = matrix(c(rep(1:nvar, each=nvar), rep(1:nvar, nvar)), ncol=2, nrow=nvar^2)
cfs = cfs[-which(cfs[,1] - cfs[,2] == 0),]
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = -0.4, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),paths),])
round(mat, 2)
paths = 20
cfs = matrix(c(rep(1:nvar, each=nvar), rep(1:nvar, nvar)), ncol=2, nrow=nvar^2)
cfs = cfs[-which(cfs[,1] - cfs[,2] == 0),]
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = -0.2, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),paths),])
round(mat, 2)
sum(abs(mat)>0)
?rnorm
# Function:
# nvar = Number of Variables
# auto = value of the AR coefficients
# cross = mean value of the cross-regressions
# sd.cross = SD of the cross-regressions
# bxy = The paths to be filled with non-zero cross-regressions
# attempts = The number of attempts to generate a VAR model before giving up
creat_pop_coef <- function(nvar, auto, cross, sd.cross, bxy, attempts = 50) {
index = 1
while(index <= attempts){
if(index >= attempts){message('Could not find a stationary VAR model with your desired settings')}
# Creating Dynamics Matrix
mat <- matrix(0, ncol = nvar, nrow = nvar)
diag(mat) <- auto
for (i in 1:nrow(bxy)){
mat[bxy[i,1], bxy[i,2]]  <- rnorm(1, cross,sd.cross)
}
# Stationarity Test
evB1 <- eigen(matrix(mat, nvar, nvar, byrow = T))$values
if(any(sqrt(abs(Re(evB1))^2 + abs(Im(evB1))^2) > 1)){
index = index+1; message('Non-Stationary. Retrying.')
}else{
return(t(mat)); index = attempts}
}
}
# Showcasing a failed example:
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = -0.2, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),27),])
mat
sum(abs(mat) > 0)
# Showcasing a failed example:
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = 0.5, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),27),])
# Function:
# nvar = Number of Variables
# auto = value of the AR coefficients
# cross = mean value of the cross-regressions
# sd.cross = SD of the cross-regressions
# bxy = The paths to be filled with non-zero cross-regressions
# attempts = The number of attempts to generate a VAR model before giving up
creat_pop_coef <- function(nvar, auto, cross, sd.cross, bxy, attempts = 50) {
index = 1
while(index <= attempts){
# Creating Dynamics Matrix
mat <- matrix(0, ncol = nvar, nrow = nvar)
diag(mat) <- auto
for (i in 1:nrow(bxy)){
mat[bxy[i,1], bxy[i,2]]  <- rnorm(1, cross,sd.cross)
}
# Stationarity Test
evB1 <- eigen(matrix(mat, nvar, nvar, byrow = T))$values
if(any(sqrt(abs(Re(evB1))^2 + abs(Im(evB1))^2) > 1)){
index = index+1; message('Non-Stationary. Retrying.')
}else{
return(t(mat)); index = attempts
if(index == attempts){message('Could not find a stationary VAR model with your desired settings')}}
}
}
# Showcasing a failed example:
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = 0.5, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),27),])
# Function:
# nvar = Number of Variables
# auto = value of the AR coefficients
# cross = mean value of the cross-regressions
# sd.cross = SD of the cross-regressions
# bxy = The paths to be filled with non-zero cross-regressions
# attempts = The number of attempts to generate a VAR model before giving up
creat_pop_coef <- function(nvar, auto, cross, sd.cross, bxy, attempts = 50) {
index = 1
while(index <= attempts){
# Creating Dynamics Matrix
mat <- matrix(0, ncol = nvar, nrow = nvar)
diag(mat) <- auto
for (i in 1:nrow(bxy)){
mat[bxy[i,1], bxy[i,2]]  <- rnorm(1, cross,sd.cross)
}
# Stationarity Test
evB1 <- eigen(matrix(mat, nvar, nvar, byrow = T))$values
if(any(sqrt(abs(Re(evB1))^2 + abs(Im(evB1))^2) > 1)){
index = index+1;
if(index == attempts){message('Could not find a stationary VAR model with your desired settings')}else{
message('Non-Stationary. Retrying.')}
}else{
return(t(mat)); index = attempts}
}
}
# The actual code
set.seed(321993)
# Number of Variables
nvar = 10
# Number of Cross-Regressions desired
paths = 20
# Listing all possible matrix elements
cfs = matrix(c(rep(1:nvar, each=nvar), rep(1:nvar, nvar)), ncol=2, nrow=nvar^2)
# Eliminating AR's from the list of options for possible candidate paths
cfs = cfs[-which(cfs[,1] - cfs[,2] == 0),]
# Simulating a population VAR(1) model with cross-regressions set to rnorm(1, mean = 0.2, sd = 0.05)
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = -0.2, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),paths),])
# Printing the matrix
round(mat, 2)
# Showcasing a failed example:
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = 0.5, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),27),])
# Showcasing a failed example:
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = 0.5, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),27),])
# Function:
# nvar = Number of Variables
# auto = value of the AR coefficients
# cross = mean value of the cross-regressions
# sd.cross = SD of the cross-regressions
# bxy = The paths to be filled with non-zero cross-regressions
# attempts = The number of attempts to generate a VAR model before giving up
creat_pop_coef <- function(nvar, auto, cross, sd.cross, bxy, attempts = 50) {
index = 1
while(index <= attempts){
# Creating Dynamics Matrix
mat <- matrix(0, ncol = nvar, nrow = nvar)
diag(mat) <- auto
for (i in 1:nrow(bxy)){
mat[bxy[i,1], bxy[i,2]]  <- rnorm(1, cross,sd.cross)
}
# Stationarity Test
evB1 <- eigen(matrix(mat, nvar, nvar, byrow = T))$values
if(any(sqrt(abs(Re(evB1))^2 + abs(Im(evB1))^2) > 1)){
index = index+1;
if(index == attempts){message('Could not find a stationary VAR model with your desired settings'); break}else{
message('Non-Stationary. Retrying.')}
}else{
return(t(mat)); index = attempts}
}
}
# The actual code
set.seed(321993)
# Number of Variables
nvar = 10
# Number of Cross-Regressions desired
paths = 20
# Listing all possible matrix elements
cfs = matrix(c(rep(1:nvar, each=nvar), rep(1:nvar, nvar)), ncol=2, nrow=nvar^2)
# Eliminating AR's from the list of options for possible candidate paths
cfs = cfs[-which(cfs[,1] - cfs[,2] == 0),]
# Simulating a population VAR(1) model with cross-regressions set to rnorm(1, mean = 0.2, sd = 0.05)
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = -0.2, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),paths),])
# Printing the matrix
round(mat, 2)
# Showcasing a failed example:
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = 0.5, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),27),])
# Showcasing a failed example:
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = 0.5, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),27),])
# Function to update the message
updateMessage <- function(message) {
# Clear the previous message by printing '\r' (carriage return)
cat("\r")
# Print the updated message
cat(message)
# Flush the output immediately to ensure the message is displayed
flush.console()
}
# Example usage in a for loop
for (i in 1:10) {
# Construct the message
message <- paste("Processing iteration", i)
# Update the message
updateMessage(message)
# Perform some computation or task
# ...
# Add a slight delay to simulate work being done
Sys.sleep(1)
}
# Function to update messages
updateMessage <- function(message) {
# Clear the previous message by printing '\r' (carriage return)
cat("\r")
# Print the updated message
cat(message)
# Flush the output immediately to ensure the message is displayed
flush.console()
}
# Function:
# nvar = Number of Variables
# auto = value of the AR coefficients
# cross = mean value of the cross-regressions
# sd.cross = SD of the cross-regressions
# bxy = The paths to be filled with non-zero cross-regressions
# attempts = The number of attempts to generate a VAR model before giving up
creat_pop_coef <- function(nvar, auto, cross, sd.cross, bxy, attempts = 50) {
index = 1
while(index <= attempts){
# Creating Dynamics Matrix
mat <- matrix(0, ncol = nvar, nrow = nvar)
diag(mat) <- auto
for (i in 1:nrow(bxy)){
mat[bxy[i,1], bxy[i,2]]  <- rnorm(1, cross,sd.cross)
}
# Stationarity Test
evB1 <- eigen(matrix(mat, nvar, nvar, byrow = T))$values
if(any(sqrt(abs(Re(evB1))^2 + abs(Im(evB1))^2) > 1)){
index = index+1;
if(index == attempts){message('Could not find a stationary VAR model with your desired settings'); break}else{
updateMessage(message('Non-Stationary. Retrying.'))}
}else{
return(t(mat)); index = attempts}
}
}
# The actual code
set.seed(321993)
# Number of Variables
nvar = 10
# Number of Cross-Regressions desired
paths = 20
# Listing all possible matrix elements
cfs = matrix(c(rep(1:nvar, each=nvar), rep(1:nvar, nvar)), ncol=2, nrow=nvar^2)
# Eliminating AR's from the list of options for possible candidate paths
cfs = cfs[-which(cfs[,1] - cfs[,2] == 0),]
# Simulating a population VAR(1) model with cross-regressions set to rnorm(1, mean = 0.2, sd = 0.05)
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = -0.2, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),paths),])
# Printing the matrix
round(mat, 2)
# Showcasing a failed example:
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = 0.5, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),27),])
# Example usage in a for loop
for (i in 1:10) {
# Construct the message
message <- paste("Processing iteration", i)
# Update the message
updateMessage(message)
# Perform some computation or task
# ...
# Add a slight delay to simulate work being done
Sys.sleep(1)
}
# Showcasing a failed example:
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = 0.5, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),27),])
# Example usage in a for loop
for (i in 1:10) {
# Construct the message
message <- paste("Processing iteration", i)
# Update the message
updateMessage(message('Non-Stationary. Retrying.'))
# Perform some computation or task
# ...
# Add a slight delay to simulate work being done
Sys.sleep(1)
}
# Update the message
updateMessage(paste0('Non-Stationary. Retrying.'))
# Example usage in a for loop
for (i in 1:10) {
# Construct the message
message <- paste("Processing iteration", i)
# Update the message
updateMessage(paste0('Non-Stationary. Retrying.'))
# Perform some computation or task
# ...
# Add a slight delay to simulate work being done
Sys.sleep(1)
}
# Function to update messages
updateMessage <- function(message) {
# Clear the previous message by printing '\r' (carriage return)
cat("\r")
# Print the updated message
cat(message)
# Flush the output immediately to ensure the message is displayed
flush.console()
}
# Function:
# nvar = Number of Variables
# auto = value of the AR coefficients
# cross = mean value of the cross-regressions
# sd.cross = SD of the cross-regressions
# bxy = The paths to be filled with non-zero cross-regressions
# attempts = The number of attempts to generate a VAR model before giving up
creat_pop_coef <- function(nvar, auto, cross, sd.cross, bxy, attempts = 50) {
index = 1
while(index <= attempts){
# Creating Dynamics Matrix
mat <- matrix(0, ncol = nvar, nrow = nvar)
diag(mat) <- auto
for (i in 1:nrow(bxy)){
mat[bxy[i,1], bxy[i,2]]  <- rnorm(1, cross,sd.cross)
}
# Stationarity Test
evB1 <- eigen(matrix(mat, nvar, nvar, byrow = T))$values
if(any(sqrt(abs(Re(evB1))^2 + abs(Im(evB1))^2) > 1)){
index = index+1;
if(index == attempts){message('Could not find a stationary VAR model with your desired settings'); break}else{
updateMessage(paste0('Non-Stationary. Retrying. Attempt #',index,' of ', attempts))}
}else{
return(t(mat)); index = attempts}
}
}
# The actual code
set.seed(321993)
# Number of Variables
nvar = 10
# Number of Cross-Regressions desired
paths = 20
# Listing all possible matrix elements
cfs = matrix(c(rep(1:nvar, each=nvar), rep(1:nvar, nvar)), ncol=2, nrow=nvar^2)
# Eliminating AR's from the list of options for possible candidate paths
cfs = cfs[-which(cfs[,1] - cfs[,2] == 0),]
# Simulating a population VAR(1) model with cross-regressions set to rnorm(1, mean = 0.2, sd = 0.05)
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = -0.2, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),paths),])
# Printing the matrix
round(mat, 2)
# Showcasing a failed example:
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = 0.5, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),27),])
# Showcasing a failed example:
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = 0.5, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),27),])
# Function:
# nvar = Number of Variables
# auto = value of the AR coefficients
# cross = mean value of the cross-regressions
# sd.cross = SD of the cross-regressions
# bxy = The paths to be filled with non-zero cross-regressions
# attempts = The number of attempts to generate a VAR model before giving up
creat_pop_coef <- function(nvar, auto, cross, sd.cross, bxy, attempts = 50) {
index = 1
while(index <= attempts){
# Creating Dynamics Matrix
mat <- matrix(0, ncol = nvar, nrow = nvar)
diag(mat) <- auto
for (i in 1:nrow(bxy)){
mat[bxy[i,1], bxy[i,2]]  <- rnorm(1, cross,sd.cross)
}
# Stationarity Test
evB1 <- eigen(matrix(mat, nvar, nvar, byrow = T))$values
if(any(sqrt(abs(Re(evB1))^2 + abs(Im(evB1))^2) > 1)){
index = index+1;
if(index == attempts){updateMessage(paste0('Could not find a stationary VAR model with your desired settings'))
break}else{
updateMessage(paste0('Non-Stationary. Retrying. Attempt #',index,' of ', attempts))}
}else{
return(t(mat)); index = attempts}
}
}
updateMessage <- function(message) {
# Clear the previous message by printing '\r' (carriage return)
cat("\r")
# Print the updated message
cat(message)
# Flush the output immediately to ensure the message is displayed
flush.console()
}
# Function:
# nvar = Number of Variables
# auto = value of the AR coefficients
# cross = mean value of the cross-regressions
# sd.cross = SD of the cross-regressions
# bxy = The paths to be filled with non-zero cross-regressions
# attempts = The number of attempts to generate a VAR model before giving up
creat_pop_coef <- function(nvar, auto, cross, sd.cross, bxy, attempts = 50) {
index = 1
while(index <= attempts){
# Creating Dynamics Matrix
mat <- matrix(0, ncol = nvar, nrow = nvar)
diag(mat) <- auto
for (i in 1:nrow(bxy)){
mat[bxy[i,1], bxy[i,2]]  <- rnorm(1, cross,sd.cross)
}
# Stationarity Test
evB1 <- eigen(matrix(mat, nvar, nvar, byrow = T))$values
if(any(sqrt(abs(Re(evB1))^2 + abs(Im(evB1))^2) > 1)){
index = index+1;
if(index == attempts){updateMessage(paste0('Could not find a stationary VAR model with your desired settings'))
break}else{
updateMessage(paste0('Non-Stationary. Retrying. Attempt #',index,' of ', attempts))}
}else{
return(t(mat)); index = attempts}
}
}
# The actual code
set.seed(321993)
# Number of Variables
nvar = 10
# Number of Cross-Regressions desired
paths = 20
# Listing all possible matrix elements
cfs = matrix(c(rep(1:nvar, each=nvar), rep(1:nvar, nvar)), ncol=2, nrow=nvar^2)
# Eliminating AR's from the list of options for possible candidate paths
cfs = cfs[-which(cfs[,1] - cfs[,2] == 0),]
# Simulating a population VAR(1) model with cross-regressions set to rnorm(1, mean = 0.2, sd = 0.05)
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = -0.2, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),paths),])
# Printing the matrix
round(mat, 2)
# Showcasing a failed example:
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = 0.5, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),27),])
# Example usage in a for loop
for (i in 1:10) {
# Construct the message
message <- paste("Processing iteration", i)
# Update the message
updateMessage(paste0('Non-Stationary. Retrying.'))
# Perform some computation or task
# ...
# Add a slight delay to simulate work being done
Sys.sleep(1)
}
# Showcasing a failed example:
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = 0.5, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),27),])
# Showcasing a failed example:
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = 0.5, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),27),])
# Showcasing a failed example:
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = 0.5, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),27),])
# Showcasing a failed example with 27 positive Cross-Regressions with a mean-value of 0.3
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = 0.3, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),27),])
# The actual code
set.seed(321993)
# Number of Variables
nvar = 100
# Number of Cross-Regressions desired
paths = 200
# Listing all possible matrix elements
cfs = matrix(c(rep(1:nvar, each=nvar), rep(1:nvar, nvar)), ncol=2, nrow=nvar^2)
# Eliminating AR's from the list of options for possible candidate paths
cfs = cfs[-which(cfs[,1] - cfs[,2] == 0),]
# Simulating a population VAR(1) model with cross-regressions set to rnorm(1, mean = 0.2, sd = 0.05)
mat = creat_pop_coef(nvar = nvar,
auto = 0.7,
cross = -0.2, sd.cross = 0.05,
bxy = cfs[sample(nrow(cfs),paths),])
mat
sum(abs(mat)>0)
